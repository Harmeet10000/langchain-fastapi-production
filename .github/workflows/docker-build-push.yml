name: Build and Push Docker Image

on:
  push:
    branches: [js-mongoDB]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: harmeet10000/auth-service

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env.dev file
        run: |
          cat > .env.dev << EOF
          NODE_ENV=development
          PORT=${{ secrets.PORT }}
          SERVER_URL=${{ secrets.SERVER_URL }}
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          DATABASE=${{ secrets.DATABASE }}
          DB_POOL_SIZE=${{ secrets.DB_POOL_SIZE }}
          MIGRATE_MONGO_URI=${{ secrets.MIGRATE_MONGO_URI }}
          MIGRATE_AUTOSYNC=${{ secrets.MIGRATE_AUTOSYNC }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          RABBITMQ_URL=${{ secrets.RABBITMQ_URL }}
          RABBITMQ_PRIVATE_URL=${{ secrets.RABBITMQ_PRIVATE_URL }}
          RABBITMQ_NODENAME=${{ secrets.RABBITMQ_NODENAME }}
          RABBITMQ_DEFAULT_USER=${{ secrets.RABBITMQ_DEFAULT_USER }}
          RABBITMQ_DEFAULT_PASS=${{ secrets.RABBITMQ_DEFAULT_PASS }}
          KAFKA_BROKER=${{ secrets.KAFKA_BROKER }}
          KAFKA_USERNAME=${{ secrets.KAFKA_USERNAME }}
          KAFKA_PASSWORD=${{ secrets.KAFKA_PASSWORD }}
          KAFKA_TOPIC=${{ secrets.KAFKA_TOPIC }}
          KAFKA_SERVICE_URI=${{ secrets.KAFKA_SERVICE_URI }}
          KAFKA_HOST=${{ secrets.KAFKA_HOST }}
          KAFKA_PORT=${{ secrets.KAFKA_PORT }}
          KAFKA_SSL_CA_CERT=${{ secrets.KAFKA_SSL_CA_CERT }}
          KAFKA_SSL_CERT=${{ secrets.KAFKA_SSL_CERT }}
          KAFKA_SSL_KEY=${{ secrets.KAFKA_SSL_KEY }}
          KAFKA_SSL_ENABLED=${{ secrets.KAFKA_SSL_ENABLED }}
          ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }}
          REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}
          ACCESS_TOKEN_EXPIRY=${{ secrets.ACCESS_TOKEN_EXPIRY }}
          REFRESH_TOKEN_EXPIRY=${{ secrets.REFRESH_TOKEN_EXPIRY }}
          RESEND_KEY=${{ secrets.RESEND_KEY }}
          LOG_LEVEL=${{ secrets.LOG_LEVEL }}
          S3_BACKUP_ENABLED=${{ secrets.S3_BACKUP_ENABLED }}
          S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          S3_PREFIX=${{ secrets.S3_PREFIX }}
          BUCKET_NAME=${{ secrets.BUCKET_NAME }}
          BUCKET_REGION=${{ secrets.BUCKET_REGION }}
          ACCESS_KEY=${{ secrets.ACCESS_KEY }}
          SECRET_ACCESS_KEY=${{ secrets.SECRET_ACCESS_KEY }}
          RUN_BACKUP_ONCE=${{ secrets.RUN_BACKUP_ONCE }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URIS=${{ secrets.GOOGLE_REDIRECT_URIS }}
          EOF

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/dev.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
